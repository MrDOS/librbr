/**
 * \file RBRInstrumentSecurity.h
 *
 * \brief Instrument commands and structures pertaining to command security and
 * interaction.
 *
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction
 *
 * \copyright
 * Copyright (c) 2018 RBR Ltd.
 * Licensed under the Apache License, Version 2.0.
 */

#ifndef LIBRBR_RBRINSTRUMENTSECURITY_H
#define LIBRBR_RBRINSTRUMENTSECURITY_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * \brief Permits a protected command to be executed.
 *
 * Permits a protected command to be executed immediately after this one;
 * receipt of anything else removes the permission again. Any other constraints
 * on executing a particular command will still apply. It is not an error to
 * `permit` a command which does not need it, merely unnecessary.
 *
 * \param [in] instrument the instrument connection
 * \param [in] command the command to permit
 * \return #RBRINSTRUMENT_SUCCESS when the command has been permitted
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \return #RBRINSTRUMENT_HARDWARE_ERROR if the command can't be permitted
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/permit
 */
RBRInstrumentError RBRInstrument_permit(RBRInstrument *instrument,
                                        const char *command);

/**
 * \brief Get the state of the “Ready:” prompt.
 *
 * The prompt is normally sent by the logger in response to almost any command
 * after any other output generated by the command is complete.
 *
 * \param [in] instrument the instrument connection
 * \param [out] prompt whether the prompt is enabled
 * \return #RBRINSTRUMENT_SUCCESS when the setting is successfully read
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/prompt
 */
RBRInstrumentError RBRInstrument_getPrompt(RBRInstrument *instrument,
                                           bool *prompt);

/**
 * \brief Set the state of the “Ready:” prompt.
 *
 * \param [in] instrument the instrument connection
 * \param [in] prompt whether the prompt should be enabled
 * \return #RBRINSTRUMENT_SUCCESS when the setting is successfully written
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/prompt
 */
RBRInstrumentError RBRInstrument_setPrompt(RBRInstrument *instrument,
                                           bool prompt);

/**
 * \brief Get the state of the logger's confirmation responses.
 *
 * The confirmation responses are normally sent after a parameter has been
 * modified if the state is on.
 *
 * \param [in] instrument the instrument connection
 * \param [out] confirmation whether confirmation is enabled
 * \return #RBRINSTRUMENT_SUCCESS when the setting is successfully read
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/confirmation
 */
RBRInstrumentError RBRInstrument_getConfirmation(RBRInstrument *instrument,
                                                 bool *confirmation);

/**
 * \brief Set the state of the logger's confirmation responses.
 *
 * This function permits confirmation to be set on or off. However, the rest of
 * the library expects confirmations to be on, and most setters will poll the
 * instrument until timeout with it off.
 *
 * \param [in] instrument the instrument connection
 * \param [in] confirmation whether confirmation should be enabled
 * \return #RBRINSTRUMENT_SUCCESS when the setting is successfully written
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/confirmation
 */
RBRInstrumentError RBRInstrument_setConfirmation(RBRInstrument *instrument,
                                                 bool confirmation);

/**
 * \brief Reset the logger CPU.
 *
 * \param [in] instrument the instrument connection
 * \param [in] delay time in milliseconds to wait before rebooting
 * \return #RBRINSTRUMENT_SUCCESS when the CPU has been rebooted
 * \return #RBRINSTRUMENT_TIMEOUT when a timeout occurs
 * \return #RBRINSTRUMENT_CALLBACK_ERROR returned by a callback
 * \see https://docs.rbr-global.com/L3commandreference/commands/security-and-interaction/reboot
 */
RBRInstrumentError RBRInstrument_reboot(RBRInstrument *instrument,
                                        int32_t delay);

#ifdef __cplusplus
}
#endif

#endif /* LIBRBR_RBRINSTRUMENTSECURITY_H */
